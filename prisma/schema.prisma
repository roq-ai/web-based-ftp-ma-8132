generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model company {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?       @db.VarChar(255)
  name        String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  user_id     String        @db.Uuid
  tenant_id   String        @db.VarChar(255)
  user        user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ftp_account ftp_account[]
  invitation  invitation[]
  member      member[]
}

model ftp_account {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username   String   @db.VarChar(255)
  password   String   @db.VarChar(255)
  server     String   @db.VarChar(255)
  port       Int
  company_id String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  company    company  @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model invitation {
  id                                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status                                String   @db.VarChar(255)
  company_id                            String   @db.Uuid
  invited_user_id                       String   @db.Uuid
  inviter_user_id                       String   @db.Uuid
  created_at                            DateTime @default(now()) @db.Timestamp(6)
  updated_at                            DateTime @default(now()) @db.Timestamp(6)
  company                               company  @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_invitation_invited_user_idTouser user     @relation("invitation_invited_user_idTouser", fields: [invited_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_invitation_inviter_user_idTouser user     @relation("invitation_inviter_user_idTouser", fields: [inviter_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model member {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  company_id String    @db.Uuid
  joined_at  DateTime  @default(now()) @db.Timestamp(6)
  left_at    DateTime? @db.Timestamp(6)
  status     String    @db.VarChar(255)
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  company    company   @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       user      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id                                          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                       String       @unique @db.VarChar(255)
  firstName                                   String?      @db.VarChar(255)
  lastName                                    String?      @db.VarChar(255)
  roq_user_id                                 String       @db.VarChar(255)
  tenant_id                                   String       @db.VarChar(255)
  created_at                                  DateTime     @default(now()) @db.Timestamp(6)
  updated_at                                  DateTime     @default(now()) @db.Timestamp(6)
  company                                     company[]
  invitation_invitation_invited_user_idTouser invitation[] @relation("invitation_invited_user_idTouser")
  invitation_invitation_inviter_user_idTouser invitation[] @relation("invitation_inviter_user_idTouser")
  member                                      member[]
}
